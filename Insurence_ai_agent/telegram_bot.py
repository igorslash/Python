"""Telegram-–±–æ—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Insurance AI Agent.

–î–ª—è –∑–∞–ø—É—Å–∫–∞:
    1. —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram.
    2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è: export TELEGRAM_BOT_TOKEN='your_token'
    3. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python telegram_bot.py

–ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç.
"""

import os
import logging
import asyncio
from typing import Any, Dict
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters
from agent import InsuranceAgent


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ (–æ–¥–∏–Ω –Ω–∞ –≤—Å—ë –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ)
AGENT = InsuranceAgent()


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–µ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    if not update.message or not update.message.text:
        return

    user_text = update.message.text.strip()
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text[:50]}...")

    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç
        result: Dict[str, Any] = AGENT.process(text=user_text)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç
        response = _format_response(result)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        response = (
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(response, parse_mode="Markdown")


def _format_response(result: Dict[str, Any]) -> str:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–≥–µ–Ω—Ç–∞ –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Telegram."""
    task = result["task"]
    data = result["result"]
    lang = result["language"]

    if task == "insurance_recommendation":
        product = data.get("product")
        if not product:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–∞—Ö–æ–≤–∫—É –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É."
        alt_count = len(data.get("alternatives", []))
        resp = (
            f"‚úÖ *–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø—Ä–æ–¥—É–∫—Ç:*\n"
            f"*{product['name']}* (`{product['id']}`)\n"
            f"{product['description']}\n"
            f"–¶–µ–Ω–∞: –æ—Ç {product['price_range'][0]} –¥–æ "
            f"{product['price_range'][1]} {product['currency']}\n"
        )
        if alt_count > 0:
            resp += f"\n‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ –µ—â—ë {alt_count} –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤(–∞)."
        return resp

    elif task == "sentiment_analysis":
        sentiment = data["sentiment"]
        score = data["score"]
        emoji = {"positive": "üòä", "negative": "üòû", "neutral": "üòê"}.get(sentiment, "‚ùì")
        return f"{emoji} –¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: *{sentiment}* (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {score:.2f})"

    elif task == "support_classification":
        label = data["label"]
        score = data["score"]
        labels_ru = {
            "insurance": "—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞",
            "support": "—Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "complaint": "–∂–∞–ª–æ–±–∞",
            "other": "–ø—Ä–æ—á–µ–µ",
        }
        category = labels_ru.get(label, label)
        return f"üì• –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è: *{category}* ({score:.2f})"

    elif task == "ner":
        entities = data.get("entities", [])
        if not entities:
            return "üîç –°—É—â–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        items = [f"`{e['text']}` ‚Üí `{e['label']}`" for e in entities[:5]]
        return "üî§ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:\n" + "\n".join(items)

    else:
        return f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ `{task}` (—è–∑—ã–∫: {lang})"


async def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram-–±–æ—Ç–∞."""
    token = os.getenv("TELEGRAM_BOT_TOKEN")
    if not token:
        raise EnvironmentError(
            "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
        )

    application = Application.builder().token(token).build()

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await application.run_polling()


if __name__ == "__main__":
    asyncio.run(main())